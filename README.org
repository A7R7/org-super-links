#+TITLE: org-super-links

Create links with auto backlinks is the general idea.

I'm trying to keep this as flexible as possible. There are a few different ways to use this to support different use cases and workflows. See Usage for a more detailed explanation.

This is still super alpha and I'm still kind of fleshing out the idea, but I think I like it.

* Super basic example

View the org source to get an idea of how this looks.

'''
* TODO Test heading target
  :PROPERTIES:
  :ID:       02a5da87-46e5-4ae0-85c1-ee63a570270a
  :END:
  :BACKLINKS:
  [2020-04-11 Sat 00:26] <- [[id:3835d3d0-931a-4a45-a015-a3d6a0baa99a][This has a link]]
  :END:

This has a backlink as you can see from the BACKLINKS drawer above.

* TODO This has a link
  :PROPERTIES:
  :ID:       3835d3d0-931a-4a45-a015-a3d6a0baa99a
  :END:
This has a link pointing to the heading above

[[id:02a5da87-46e5-4ae0-85c1-ee63a570270a][Test heading target]]
'''

* Installation

This needs better instructions, but here's something basic at least for now. Once I'm reasonably happy with the interface etc. I'll try to get this on melpa.

There is a dependency on either [[https://github.com/alphapapa/org-ql][helm-org-ql]] or [[https://github.com/alphapapa/org-rifle][helm-org-rifle]], or you can define a custom search function. By default it will use =helm-org-ql=. See [[id:ba63c582-56ba-4772-94f6-8319f1b33ff0][sl-default-description-formatter]] for details.

This isn't on melpa, but using quelpa makes it easy. Example configuration:
#+begin_src elisp
  (use-package org-super-links
    :quelpa (org-super-links :repo "toshism/org-super-links" :fetcher github :commit "0.2")
    :bind (("C-c s s" . sl-link)
	   ("C-c s l" . sl-store-link)
	   ("C-c s C-l" . sl-insert-link)))
#+end_src

* Usage

There are a few different possible use cases.

** Org link replacement

Instead of calling =org-store-link= call =sl-store-link=. Then to insert the link instead of =org-insert-link= call =sl-insert-link=. That will insert a link as normal while also adding a backlink at the target of the link. This should work the same as regular org links, with the benefit of adding the backlink.

** sl-link

To create a link a link at point call =sl-link=. That will bring up helm-org-rifle and allow you to select the target. Once selected a link will be inserted at point, and a backlink added to target.

** helm-org-rifle action

There is also a =helm-org-rifle= action. To use this method, with the point at the place you would like the link, call =helm-org-rifle=. Select the target of the link and from the actions menu choose =Super Link=. A link pointing to the selected candidate will be created at point, and a backlink will be added to the target.

** capture template

Whenever =org-capture= is called a link to the current point is automatically stored. To insert this link simply call =sl-insert-link=. The backlink will be created automatically as usual.

* Configuration

There are currently three configurable options. I hope to add more in the future. Fair warning, I've really only tested much with the defaults (and even that is minimal).

** sl-backlink-into-drawer

   Controls how/where to insert the backlinks.
   If non-nil a drawer will be created and backlinks inserted there.  The
   default is BACKLINKS.  If this is set to a string a drawer will be
   created using that string.  For example LINKS.  If nil backlinks will
   just be inserted under the heading.

   Default: =t=

** sl-backlink-prefix

   Prefix to insert before the backlink.

   This can be a string, nil, or a function that takes no arguments
   and returns a string.

   Default is the function =sl-backlink-prefix-timestamp= which returns
   an inactive timestamp formatted according to the variable
   =org-time-stamp-formats= and a separator ` <- `.

** sl-backlink-postfix

   Postfix to insert after the backlink.
   This can be a string, nil, or a function that takes no arguments and
   returns a string

   Default =nil=

** sl-link-prefix

   Prefix to insert before the link.
   This can be a string, nil, or a function that takes no arguments and
   returns a string

   Default nil

** sl-link-postfix nil

   Postfix to insert after the link.
   This can be a string, nil, or a function that takes no arguments and
   returns a string

   Default =nil=

** sl-default-description-formatter
   :PROPERTIES:
   :ID:       ba63c582-56ba-4772-94f6-8319f1b33ff0
   :END:

   What to use if no description is provided.
   This can be a string, nil or a function that accepts two arguments
   LINK and DESC and returns a string.

   nil will return the default desciption or the link.
   string will be used only as a default fall back if set.
   function will be called for every link.

   Default is the variable =org-make-link-desciption-function=.

** sl-search-function

   The interface to use for finding target links.
   This can be a string with one of the values 'helm-org-ql',
   'helm-org-rifle', or a custom function.  If you provide a custom
   function it will be called with the `point` at the location the link
   should be inserted.  The only other requirement is that it should call
   the function =sl--insert-link= with the `buffer` and `pos` of the
   target link.  AKA the place you want the backlink.

   Using 'helm-org-ql' or 'helm-org-rifle' will also add a new action to
   the respective action menu.

   See the function =sl-link-search-interface-ql= in the
   =org-super-links-org-ql.el= file for an example.

   Default ='helm-org-ql'=

* Notes

This is still kind of in flux, so things could change... I'm still playing around with the idea a bit.

I'm considering adding some kind of index kind of thing in the spirit of zettelkasten or roam or something. Not sure how I want it to work yet though.

* Changelog
** 0.2

[2020-04-25]

- Default target heading search changed to =helm-org-ql=
- Allow target heading search to be configurable through =sl-search-function=
- Add more configuration options for link formatting
- Support for customizing the default link descripton =sl-default-description-formatter=

Bugfixes:
- fix issue when calling =org-capture= from a non-org-mode buffer.

** 0.1

[2020-04-11] First release

* License
MIT
